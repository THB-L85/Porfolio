---
// Supports weights 100-900
import "@fontsource-variable/onest";
import Header from "../components/Header.astro";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="cursor-auto">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="./monitor.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:ital,opsz,wght@0,6..12,200..1000;1,6..12,200..1000&family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Rubik:ital,wght@0,300..900;1,300..900&display=swap" rel="stylesheet">
  </head>
  <body class="relative bg-gray-50 dark:bg-[#09101b] text-gray-800 dark:text-white body-text-color-transition transition-colors duration-500">
	<!-- <div class="absolute top-0 bottom-0 z-[-2] min-h-screen w-full bg-neutral-950 bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))]"></div> -->
    <Header />
    <div id="cursor-blur" class="pointer-events-none fixed z-[-1] blur-lg"></div>
    <slot />
  </body>
</html>
<style is:global>
  :root {
    color-scheme: light dark;
  }
  html {
    font-family: "Rubik", system-ui, sans-serif;
    scroll-behavior: smooth;
    scroll-snap-type: y mandatory;
  }
  body {
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  @keyframes borderPulse {
    0%, 100% {
      box-shadow: 0 0 0 0 #21c45db3;
    }
    50% {
      box-shadow: 0 0 5px 8px rgba(34, 197, 94, 0);
    }
  }
  .pulsate {
    animation: borderPulse 2s infinite;
  }

  /* .body-text-color-transition {
    transition: color 0.5s;
  } */

  /* #cursor-blur {
    width: 600px;
    height: 600px;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.089), transparent 80%);
    border-radius: 9999px;
    transform: translate(-50%, -50%);
    transition: transform 0.15s ease-out;
  } */
  
</style>

<script type="module">

  const blurCursor = document.getElementById('cursor-blur');

  document.addEventListener('mousemove', (e) => {
    blurCursor.style.left = `${e.clientX}px`;
    blurCursor.style.top = `${e.clientY}px`;
  });

  // Obtener las tarjetas
  const card1 = document.getElementById('card1');
  const card2 = document.getElementById('card2');
  const card3 = document.getElementById('card3');

  // Cuando el mouse entra en la primera tarjeta
  card1.addEventListener('mouseenter', () => {
      card2.classList.add('opacity-50');
      card3.classList.add('opacity-50');
      card1.firstElementChild.classList.add('!text-[#F39C12]');
  });

  // Cuando el mouse sale de la primera tarjeta
  card1.addEventListener('mouseleave', () => {
      card2.classList.remove('opacity-50');
      card3.classList.remove('opacity-50');
      card1.firstElementChild.classList.remove('!text-[#F39C12]');
  });

  // Cuando el mouse entra en la segunda tarjeta
  card2.addEventListener('mouseenter', () => {
      card1.classList.add('opacity-50');
      card3.classList.add('opacity-50');
      card2.firstElementChild.classList.add('!text-[#F39C12]');
  });

  // Cuando el mouse sale de la segunda tarjeta
  card2.addEventListener('mouseleave', () => {
      card1.classList.remove('opacity-50');
      card3.classList.remove('opacity-50');
      card2.firstElementChild.classList.remove('!text-[#F39C12]');
  });

  // Cuando el mouse entra en la tercera tarjeta
  card3.addEventListener('mouseenter', () => {
      card1.classList.add('opacity-50');
      card2.classList.add('opacity-50');
      card3.firstElementChild.classList.add('!text-[#F39C12]');
  });

  // Cuando el mouse sale de la tercera tarjeta
  card3.addEventListener('mouseleave', () => {
      card1.classList.remove('opacity-50');
      card2.classList.remove('opacity-50');
      card3.firstElementChild.classList.remove('!text-[#F39C12]');
  });

  // Estilos para el navbar al hacer clic
  const links = document.querySelectorAll('.nav-link');
  links.forEach(link => {
    link.addEventListener('click', function () {
      links.forEach(l => l.classList.remove('text-[#F39C12]', 'bg-[white]/10', ));
      this.classList.add('text-[#F39C12]', 'bg-[white]/10', ); // estilos activos
    });
  });

  // Estilos para el navbar al hacer scroll
  const navbar = document.getElementById('navbar');
  
  window.addEventListener('scroll', function (e) {
    let bgHeader = html.classList.contains('dark') ? 'bg-black/30' : 'bg-slate-400/30';
    if (window.scrollY > 70) {
      navbar.classList.add(bgHeader)
    }else{
      navbar.classList.remove(bgHeader)
    }
  });
  
  // Toggle theme
  const themeToggle = document.getElementById('theme-toggle');
  const html = document.documentElement;

  // Cargar estado desde localStorage (opcional)
  if (localStorage.getItem('theme') === 'dark') {
    html.classList.add('dark');
  } else {
    html.classList.remove('dark');
  }

  themeToggle.addEventListener('click', () => {
    if (html.classList.contains('dark')) {
      html.classList.remove('dark');
      localStorage.setItem('theme', 'light');
      themeToggle.innerText = 'üåô';
    } else {
      html.classList.add('dark');
      localStorage.setItem('theme', 'dark');
      themeToggle.innerText = '‚òÄÔ∏è';
    }
  });

</script>